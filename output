const { Schema, model } = require("mongoose");
const Layouts = require("./Layouts.model");

const venueSchema = new Schema(
  {
    name: { type: String, trim: true },
    description: { type: String, trim: true, default: "No Description" },
    maxCapacity: Number,
    contact: {
      email: String,
      owner: String,
      telephone: String,
    },
    address: Object,
    image: {
      type: String,
      trim: true,
      default:
        "https://res.cloudinary.com/dg2rwod7i/image/upload/v1707111848/spotmeup/hwsw7dy5a9odkx6gkbot.jpg",
    },
    layouts: [{ type: Schema.Types.ObjectId, ref: "Layouts" }],
  },
  {
    timestamps: true,
  }
);

venueSchema.pre("deleteOne", {document:true, query:false}, async function (next) {
  try {
    const layouts = await Layouts.find({venue:this._id})
    console.log("Deleting layout from venue");
    await Promise.all(layouts.map((layout) => layout.deleteOne().exec()))
    next();
  } catch (error) {
    console.error("Cascade Delete Error On Venues Model");
    throw error;
  }
});

module.exports = model("Venues", venueSchema);
const { Schema, model } = require("mongoose");
const layoutSchema = new Schema(
  {
    name: String,
    width: { type: Number, default: 800 },
    maxWidth: {type: Number, default: 1200},
    height: { type: Number, default: 400 },
    maxHeight: {type: Number, default: 1600},
    borderSize: { type: Number, default: 7 },
    borderRadius: { type: Number, default: 0 },
    x: { type: Number, default: 0 },
    y: { type: Number, default: 0 },
    status: String,
    layoutType: String,
    capacity: Number,
    venue: {type:Schema.Types.ObjectId, ref: "Venues"},
    blocks: [{ type: Schema.Types.ObjectId, ref: "Blocks" }],
    shapes: [{type: Schema.Types.ObjectId, ref: "Shapes"}]
  },
  {
    timestamps: true,
  }
);

layoutSchema.pre('deleteOne', {document:true, query:false},async function(next) {
  // 'this' is the layout being removed. Pass it to the next middleware.
  const Blocks = model("Blocks")
  const Shapes = model("Shapes")
  const Venues = model("Venues")
  try {
    const venue = await Venues.findById(this.venue)
    if(venue){
      venue.layouts = venue.layouts.filter(layoutId=> layoutId.toString() != this._id.toString())
      await venue.save()
      const [blocks, shapes] = await Promise.all([Blocks.find({layout:this._id}), Shapes.find({layout:this._id})])
      console.log("Deleting blocks and shapes from layout");
      await Promise.all([...blocks, ...shapes].map(doc => doc.deleteOne().exec()))
    }
    else{
      console.error("venue Not Found!")
    }
    next();
  } catch (error) {
    console.error("Cascade Delete Error On Layouts Model");
    throw error;
  }


});

module.exports = model("Layouts", layoutSchema);
const { Schema, model } = require("mongoose");
const Sections = require("./Sections.model");
const Tables = require("./Tables.model");

const blockSchema = new Schema(
  {
    name: {type: String, default: ""},
    status: String,
    blockType: String,
    blockTableType: String, // If Block Type is "Circle" then this should be "addTableCircle" if "Square" then this should be "addTableSquare"
    capacity: Number,
    bprice: Number,
    maxRow: {type: Number, default: 0}, //Table Prop
    maxCol: {type: Number, default: 0}, //Table Prop
    maxSection: {type:Number, default: 4},
    maxTables: Number,
    width: { type: Number, default: 100 },
    height: { type: Number, default: 100 },
    border: { type: String, trim: true },
    borderRadius: { type: Number, default: 50 },
    borderLeftSize: { type: Number, default: 1 },
    borderRightSize: { type: Number, default: 1 },
    borderTopSize: { type: Number, default: 1 },
    borderBottomSize: { type: Number, default: 1 },
    borderColor: { type: String, default: "black", trim: true },
    borderLeftColor: { type: String, default: "black", trim: true },
    borderRightColor: { type: String, default: "black", trim: true },
    borderTopColor: { type: String, default: "black", trim: true },
    borderBottomColor: { type: String, default: "black", trim: true },
    fontSize: { type: Number, default: 15 },
    borderSize: { type: Number, default: 1 },
    color: { type: String, default: "white", trim: true },
    backgroundColor: { type: String, default: "black", trim: true },
    x: { type: Number, default: 0 },
    y: { type: Number, default: 0 },
    z: { type: Number, default: 0 },
    justifyContent: { type: String, default: "", trim: true },
    alignItems: { type: String, default: "", trim: true },
    
    layout: { type: Schema.Types.ObjectId, ref: "Layouts" },

    sections: [{ type: Schema.Types.ObjectId, ref: "Sections" }],
    tables: [{ type: Schema.Types.ObjectId, ref: "Tables" }],
  },
  {
    timestamps: true,
  }
);

blockSchema.pre('deleteOne', {document:true, query:false}, async function(next) {
  const Layouts = model("Layouts")
  try {
    const layout = await Layouts.findById(this.layout)
    if(layout){
      layout.blocks = layout.blocks.filter(layoutId => layoutId.toString() != this._id.toString())
      await layout.save()
      const [sections, tables] = await Promise.all([Sections.find({block:this._id}), Tables.find({block:this._id})])
      console.log("Deleting sections and tables from block");
      await Promise.all([...sections, ...tables].map((doc) => doc.deleteOne().exec()))
    }
    else{
      console.error("layout Not Found")
    }
    next();
  } catch (error) {
    console.error("Cascade Delete Error On Blocks Model");
    throw error;
  }
})


blockSchema.pre('save', function(next) {
  this.maxTables = this.maxRow * this.maxCol;
  next();
});

module.exports = model("Blocks", blockSchema);
const { Schema, model } = require("mongoose");
// const Layouts = require("./Layouts.model");

const shapeSchema = new Schema(
  {
    shapeType: {type:String, trim:true},
    name: {type:String, default:""},
    width: {type: Number, default: 100},
    height: {type: Number, default: 100},
    border: {type:String, trim:true},
    borderRadius: {type:Number, default: 50},
    borderLeftSize: {type: Number, default:1},
    borderRightSize: {type: Number, default:1},
    borderTopSize: {type: Number, default:1},
    borderBottomSize: {type: Number, default:1},
    borderColor: {type: String, default: "black", trim:true},
    borderLeftColor: {type: String, default: "black", trim:true},
    borderRightColor: {type: String, default: "black", trim:true},
    borderTopColor: {type: String, default: "black",trim:true},
    borderBottomColor: {type: String, default: "black",trim:true},
    fontSize: {type: Number, default: 15},
    borderSize: {type:Number, default: 1},
    color: {type: String, default: "white", trim:true},
    backgroundColor: {type: String, default: "black", trim:true},
    x: {type: Number, default:0},
    y: {type: Number, default:0},
    z: {type: Number, default:0},
    justifyContent: {type: String, default:"", trim:true},
    alignItems: {type: String, default:"", trim:true},
    layout: {type: Schema.Types.ObjectId, ref:"Layouts"}
  },
  {
    timestamps: true,
  }
);

shapeSchema.pre('deleteOne', {document: true, query: false}, async function(next){
  const Layouts = model("Layouts")
  try {
    const layout = await Layouts.findById(this.layout)
    if(layout){
      layout.shapes = layout.shapes.filter(shapeId => shapeId.toString() != this._id.toString())
      await layout.save()
    }
    else{
      console.error("layout Not Found!")
    }
    next()
  } catch (error) {
    console.error("Cascade Delete Error On Shapes Model");
    throw error
  }
})
module.exports = model("Shapes", shapeSchema);
const { Schema, model } = require("mongoose");
const Seats = require("./Seats.model");
const Tables= require("./Tables.model");
// const Blocks = require("./Blocks.model");

const sectionSchema = new Schema(
  {
    name: String,
    x: Number,
    y: Number,
    width: Number,
    height: Number,
    status: String,
    capacity: Number,
    sprice: Number,
    tickets: Number,
    maxCol: Number,
    maxRow: {
      type: String,
      enum: [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
      ],
    },
    block:{ type: Schema.Types.ObjectId, ref: "Blocks" },
    seats: [{ type: Schema.Types.ObjectId, ref: "Seats" }],
    tables: [{ type: Schema.Types.ObjectId, ref: "Tables" }],
  },
  {
    timestamps: true,
  }
);

sectionSchema.pre('deleteOne', {document:true, query:false},async function (next) {
  const Blocks = model("Blocks")
  try {
    const block = await Blocks.findById(this.block)
    if(block){
      block.sections= block.sections.filter(sectionId => sectionId.toString() != this._id.toString())
      await block.save()
      const [seats, tables] = await Promise.all([Seats.find({section:this._id}), Tables.find({section:this._id})])
      console.log("Deleting seats and tables from section");
      await Promise.all([...seats, ...tables].map((doc) => doc.deleteOne().exec()))
    } else{
      console.error("block Not Found!")
    }
    next()
  } catch (error) {
    console.error("Cascade Delete Error On Sections Model");
    throw error;
  }
})


module.exports = model("Sections", sectionSchema);
const { Schema, model } = require("mongoose");

const seatSchema = new Schema(
  {
    x: Number,
    y: Number,
    width: Number,
    height: Number,
    status: String,
    cprice: Number,
    row: String,
    column: Number,
    layout:{ type: Schema.Types.ObjectId, ref: "Layouts" },
    block: { type: Schema.Types.ObjectId, ref: "Blocks" },
    section:{ type: Schema.Types.ObjectId, ref: "Sections" },
  },
  {
    timestamps: true,
  }
);


seatSchema.pre('deleteOne', {document:true, query:false}, async function(next){
  const Sections = model("Sections")
  try {
    const section = await Sections.findById(this.section)
    if(section){
      section.seats = section.seats.filter(seatId => seatId.toString() != this._id.toString())
      await section.save()
    }
    else{
      console.error("section Not Found!")
    }
    next()
  } catch (error) {
    console.error("Cascade Delete Error On Seats Model");
    throw error;

  }
})

module.exports = model("Seats", seatSchema);
const { Schema, model } = require("mongoose");

const tableSchema = new Schema(
  {
    tableType: String,
    status: String,
    cprice: Number,
    tickets: Number,
    isIncluded: Boolean,
    number: Number,
    name: {type: String, default: ""},
    x: {type: Number, default:0},
    y: {type: Number, default:0},
    z: {type: Number, default:0},
    row: {type: Number, default:0},
    col: {type: Number, default:0},
    width: {type: Number, default: 100},
    height: {type: Number, default: 100},
    border: {type:String, trim:true},
    borderRadius: {type:Number, default: 50},
    borderLeftSize: {type: Number, default:1},
    borderRightSize: {type: Number, default:1},
    borderTopSize: {type: Number, default:1},
    borderBottomSize: {type: Number, default:1},
    borderColor: {type: String, default: "black", trim:true},
    borderLeftColor: {type: String, default: "black", trim:true},
    borderRightColor: {type: String, default: "black", trim:true},
    borderTopColor: {type: String, default: "black",trim:true},
    borderBottomColor: {type: String, default: "black",trim:true},
    fontSize: {type: Number, default: 15},
    borderSize: {type:Number, default: 1},
    color: {type: String, default: "white", trim:true},
    backgroundColor: {type: String, default: "black", trim:true},
    justifyContent: {type: String, default:"", trim:true},
    alignItems: {type: String, default:"", trim:true},
    layout:{ type: Schema.Types.ObjectId, ref: "Layouts" },
    block: { type: Schema.Types.ObjectId, ref: "Blocks"},
    section:{ type: Schema.Types.ObjectId, ref: "Sections" }
  },
  {
    timestamps: true,
  }
);

tableSchema.pre('deleteOne', {document:true, query:false}, async function(next) {
  const Blocks = model("Blocks")
  const Sections = model("Sections")
  const Tables = model("Tables")
  try {
    const block = await Blocks.findById(this.block)
    const section = await Sections.findById(this.section)
    if(block){
      let start = block.tables.indexOf(this._id)
      block.tables = block.tables.filter(id => id.toString() != this._id.toString())
      await block.save()
      for(let i=start;i<block.tables.length;i++){
        const table = await Tables.findById(block.tables[i])
        if(table){
          table.number=i
          await table.save()
        }
      }
    }
    else if(section){
      let start = section.tables.indexOf(this._id)
      section.tables = section.tables.filter(id => id.toString() != this._id.toString())
      await section.save()
      for(let i=start ;i<section.tables.length;i++){
        const table = await Tables.findById(section.tables[i])
        if(table){
          table.number=i
          await table.save()
        }
      }
    }
    else{
      console.error("block and/or section Not Found!")
    }
    next()
  } catch (error) {

    throw error
  }
})

module.exports = model("Tables", tableSchema);
